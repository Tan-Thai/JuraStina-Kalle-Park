trigger:
  branches:
    exclude:
      - feature/*
      - main

pr:
  branches:
    include:
      - dev
    exclude:
      - feature/*
      - main

# Partial code from Deepseek due to me being quite lost in regards to YML and Azure -TT

# Not sure where to message the simulation of the merge, but im using an echo for now.
  # If this works, it should more or less *be* on the feature branch > fetch and merge dev into it with *no* commit.
  # Then run all the tests as if the PR went through. This should ensure that there's no conflicts after -TT

jobs:
- job: RunIntegrationTests
  steps:
  # Install dependencies (Python, Robot Framework, etc.)
  - template: templates/install-dependencies.yaml

  # Check out the PR branch (the feature branch)
  - checkout: self
    fetchDepth: 0
    persistCredentials: true

  # Configure Git user information
  - script: |
      echo "Configuring Git user information"
      git config --global user.email "azure-pipelines@example.com"
      git config --global user.name "Azure Pipelines"
    displayName: 'Configure Git User'

  # Fetch the latest dev branch
  - script: |
      echo "Fetching the latest dev branch"
      git fetch origin dev:dev
    displayName: 'Fetch dev Branch'

  # Merge dev into the PR branch locally (without committing)
  - script: |
      echo "Simulating the merged state of the PR branch and dev"
      git merge dev --no-ff --no-commit || (echo "Merge conflict detected!" && exit 1)
    displayName: 'Merge dev into PR Branch'

  # Run Robot Framework tests on the merged state
  - script: |
      echo "Running Robot Framework tests on the merged state"
      robot --output results/logs/output_pr_test.xml --log results/logs/log_pr_test.html --report results/logs/report_pr_test.html tests/
    displayName: 'Run Integration Tests for PR'

  # Reset the repository state to clean up
  - script: |
      echo "Resetting the repository state"
      git reset --hard HEAD
      git clean -fd
    displayName: 'Reset Repository State'

  # Publish the Robot Framework reports as pipeline artifacts
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(System.DefaultWorkingDirectory)/results/logs/'
      artifactName: 'robot-reports-integration-test'
    displayName: 'Publish Robot Framework Reports'